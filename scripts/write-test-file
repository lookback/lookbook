#!/usr/bin/env node
const fs = require('fs');
const { promisify } = require('util');
const path = require('path');

const writeFile = promisify(fs.writeFile);

const getColorScaleFromName = (name) => {
  const match = /(\d{1,3})$/g.exec(name);
  return match ? parseInt(match[0], 10) : null;
};

const htmlLayout = (contents) =>
  `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Lookbook Colors Test Page</title>
    <link rel="stylesheet" href="../dist/lookbook.css">
    <style>
      body {
        padding: 1em;
      }

      .block {
        font-weight: bold;
        padding: 1em;
        border-radius: .25em;
        margin-bottom: .5em;
      }

      .shadow-block {
        font-weight: bold;
        width: 200px;
        height: 150px;
        border-radius: .25em;
        margin-right: 2em;
        padding: 1em;
      }
    </style>
  </head>
  <body>
    ${contents}
  </body>
</html>
`;

/**
 * Writes a HTML page from a color hash. Will place the values (the colors)
 * as background colors, and white or black as foreground.
 *
 * @param colors A key value object of `{ colorSlug: '#colorCode' }`
 * @param colorBreakAtScale Optional number in the scale (10-100) where we
 * should break and generate white foreground colors instead of black
 */
const writeTestPage = async (colors) => {
  const colorBlocks = Object.entries(colors)
    .map(([name, color]) => ({
      color,
      scale: getColorScaleFromName(name),
      name,
    }))
    .map((s) =>`
      <p class="block" style="color: #000; background-color: var(--${s.name})">${s.name}</p>
    `
    )
    .join('');

  const misc = `<h1>A heading</h1>

<p class="mb-3">A paragraph with a <a href="#">link</a>.</p>

<div class="mb-3">
  <button class="btn">A button</button>
  <button class="btn btn-primary">A primary button</button>
  <button class="btn btn-danger">A danger button</button>
  <button class="btn btn-secondary">A secondary button</button>
</div>

<div class="flex mb-3">
  <div class="shadow-block shadow">Default</div>
  <div class="shadow-block shadow-large">Large</div>
  <div class="shadow-block shadow-small">Small</div>
  <div class="shadow-block shadow-tiny">Tiny</div>
</div>
`;

  await writeFile(
    path.resolve(__dirname + '/../test/test.html'),
    htmlLayout(`${misc}

${colorBlocks}`)
  );

  console.log(
    `âœ… Wrote HTML test page with ${Object.keys(colors).length} colors`
  );
};

writeTestPage(require('../colors.json')).catch(console.error);
