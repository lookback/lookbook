#!/usr/bin/env node

/*
 * This script fetches all color styles from a Figma team/document.
 *
 * Due to a limitation in the Figma /styles endpoint, we need to use a
 * document for actually using the colors in a color grid üôÑThat's why
 * we're both fetching from /styles and /files below.
 *
 * For now, you need to input the page and team IDs, as well as the file keys.
 * The team ID is in the Figma URL of your team, and the file key is the long
 * string in the full URL of a Figma file. The page ID is visible in the JSON
 * payload when you call /files ü§∑‚Äç‚ôÇÔ∏è
 */
const PAGE_ID = '0:1';
const TEAM_ID = '536579955360410320';
const FILE_KEY = 'OVyadU3k5tlLkXZD6chfhg';

const fetch = require('node-fetch');
const dotenv = require('dotenv');
const fs = require('fs');
const { promisify } = require('util');
const path = require('path');
const prettier = require('prettier');
const { green } = require('../lib/colorize');

const writeFile = promisify(fs.writeFile);
const readFile = promisify(fs.readFile);

dotenv.load();

const personalToken = process.env.FIGMA_PERSONAL_TOKEN;

if (!personalToken) {
  console.error('Please pass FIGMA_PERSONAL_TOKEN to this script and re-run');
  process.exit(1);
}

const figmaBase = 'https://api.figma.com/';

const rgbToHex = (r, g, b) =>
  '#' +
  ((1 << 24) + (Math.round(r) << 16) + (Math.round(g) << 8) + Math.round(b))
    .toString(16)
    .slice(1);

const slugify = (str) => str.toLowerCase().replace(/\s+/, '-');

const doFetch = (url) =>
  fetch(`${figmaBase}v1${url}`, {
    headers: {
      'X-Figma-Token': personalToken,
    },
  })
    .then((res) => {
      if (!res.ok) {
        throw new Error(`Status: ${res.status}`);
      }

      return res.json();
    })
    .then((json) => {
      if (json.error || (json.status && json.status !== 200)) {
        throw new Error(json.error || `Status ${json.status}: ${json.err}`);
      }

      return json;
    });

const fetchStyles = async (teamId) => {
  const json = await doFetch(`/teams/${teamId}/styles?page_size=99`);
  return json.meta.styles;
};

const fetchFile = async (key) => await doFetch(`/files/${key}`);

const findColorBlocks = children => children
  .map(child => {
    if (child.name === 'Color Block' && child.visible !== false) {
      return child
    } else if (!!child.children) {
      return findColorBlocks(child.children)
    }
  })
  .flat()
  .filter(c => c !== undefined)

const fetchAllColors = async () => {
  console.log('-> Fetching styles from Figma...');

  const styles = await fetchStyles(TEAM_ID);
  const file = await fetchFile(FILE_KEY);
  const canvas = file.document.children.find((page) => page.id === PAGE_ID);
  const colorBlocks = findColorBlocks(canvas.children)
  return [...colorBlocks]
      .map((c) => {
        const rect = c.children.find(x => x.type === 'RECTANGLE')
        const color = rect.fills[0]

        const { name } = c.children.find(x => x.type === 'TEXT')
        const { r, g, b } = rect.fills[0].color;

        return {
          name: name.toLowerCase(),
          hex: rgbToHex(r * 255, g * 255, b * 255),
        };
      })
      .sort((a, b) => a.name.localeCompare(b.name))
      .reduce((acc, c) => {
        acc[c.name] = c.hex
        return acc
      }, {})
};

const formatCode = async (content, parser = 'typescript') => {
  const prettierConf = JSON.parse(
    await readFile(
      path.resolve(path.join(__dirname, '..', '.prettierrc')),
      'utf-8'
    )
  );

  return prettier.format(content, { ...prettierConf, parser });
};

const writeJsFile = async (colors) => {
  console.log('-> Writing .js file with colors...');

  const fileContents = `/* eslint-disable */
  /* Updated at ${new Date().toUTCString()}*/
  module.exports = {
  ${Object.keys(colors)
    .map((colorName) => `'${colorName}': '${colors[colorName]}',`)
    .join('\n')}
  }`;

  const destPath = path.resolve(__dirname + '/../colors.js');

  await writeFile(destPath, await formatCode(fileContents));
};

const writeJsonFile = async (colors) => {
  console.log('-> Writing .json file with colors...');

  const fileContents = JSON.stringify(colors);

  const destPath = path.resolve(__dirname + '/../colors.json');

  await writeFile(destPath, await formatCode(fileContents, 'json'));
};

/**
 * Calls Figma's API and saves to a `colors.js` file in the project root.
 */
const writeColorsFromFigma = async () => {
  const colors = await fetchAllColors();

  if (!colors || colors.length === 0) {
    throw new Error("‚ùå Couldn't fetch colors");
  }

  await writeJsFile(colors);
  await writeJsonFile(colors);

  console.log(green(`Wrote ${colors.length} colors`));
};

writeColorsFromFigma().catch(console.error);
