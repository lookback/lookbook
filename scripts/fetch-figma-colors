#!/usr/bin/env node

/*
 * This script fetches all color styles from a Figma team/document.
 *
 * Due to a limitation in the Figma /styles endpoint, we need to use a
 * document for actually using the colors in a color grid üôÑThat's why
 * we're both fetching from /styles and /files below.
 *
 * For now, you need to input the page and team IDs, as well as the file keys.
 * The team ID is in the Figma URL of your team, and the file key is the long
 * string in the full URL of a Figma file. The page ID is visible in the JSON
 * payload when you call /files ü§∑‚Äç‚ôÇÔ∏è
 */
const PAGE_ID = '0:1';
const TEAM_ID = '536579955360410320';
const FILE_KEY = 'OVyadU3k5tlLkXZD6chfhg';

const fs = require('fs');
const { promisify } = require('util');
const path = require('path');
const prettier = require('prettier');
const { green } = require('../lib/colorize');

const writeFile = promisify(fs.writeFile);
const readFile = promisify(fs.readFile);

const personalToken = process.env.FIGMA_PERSONAL_TOKEN;

if (!personalToken) {
  console.error('Please pass FIGMA_PERSONAL_TOKEN to this script and re-run');
  process.exit(1);
}

const figmaBase = 'https://api.figma.com/';

const rgbToHex = (r, g, b) =>
  '#' +
  ((1 << 24) + (Math.round(r) << 16) + (Math.round(g) << 8) + Math.round(b))
    .toString(16)
    .slice(1);

const doFetch = (url) =>
  fetch(`${figmaBase}v1${url}`, {
    headers: {
      'X-Figma-Token': personalToken,
    },
  })
    .then((res) => {
      if (!res.ok) {
        throw new Error(`Status: ${res.status}`);
      }

      return res.json();
    })
    .then((json) => {
      if (json.error || (json.status && json.status !== 200)) {
        throw new Error(json.error || `Status ${json.status}: ${json.err}`);
      }

      return json;
    });

const fetchFile = async (key) => await doFetch(`/files/${key}`);

const findColorBlocks = (children) =>
  children
    .map((child) => {
      if (child.name === 'Color Block' && child.visible !== false) {
        return child;
      } else if (!!child.children) {
        return findColorBlocks(child.children);
      }
    })
    .flat()
    .filter((c) => c !== undefined);

const fetchAllColors = async () => {
  console.log('-> Fetching styles from Figma...');

  const file = await fetchFile(FILE_KEY);
  const canvas = file.document.children.find((page) => page.id === PAGE_ID);
  const colorBlocks = findColorBlocks(canvas.children);
  return [...colorBlocks]
    .map((c) => {
      const text = c.children.find((x) => x.type === 'TEXT');
      const fg = text.fills[0].color;

      const rect = c.children.find((x) => x.type === 'RECTANGLE');
      const bg = rect.fills[0].color;

      return {
        name: text.name.toLowerCase(),
        fg: rgbToHex(fg.r * 255, fg.g * 255, fg.b * 255),
        bg: rgbToHex(bg.r * 255, bg.g * 255, bg.b * 255),
      };
    })
    .sort((a, b) => {
      // sort by name and scale, so that blue-100 comes after blue-90
      const [colorA, scaleA] = a.name.split('-');
      const numScaleA = parseInt(scaleA, 10);
      const [colorB, scaleB] = b.name.split('-');
      const numScaleB = parseInt(scaleB, 10);

      const nameComp = colorA.localeCompare(colorB);

      if (nameComp == 0) {
        return numScaleA - numScaleB;
      }

      return nameComp;
    })
    .reduce((acc, { name, fg, bg }) => {
      acc[name] = { fg, bg };
      return acc;
    }, {});
};

const formatCode = async (content, parser = 'typescript') => {
  const prettierConf = JSON.parse(
    await readFile(
      path.resolve(path.join(__dirname, '..', '.prettierrc')),
      'utf-8'
    )
  );

  return prettier.format(content, { ...prettierConf, parser });
};

const writeJsFile = async (colors) => {
  console.log('-> Writing .js file with colors...');

  const fileContents = `/* eslint-disable */
  /* Updated at ${new Date().toUTCString()}*/
  module.exports = {
  ${Object.keys(colors)
    .map((colorName) => `'${colorName}': '${colors[colorName].bg}',`)
    .join('\n')}
  }`;

  const destPath = path.resolve(__dirname + '/../colors.js');

  await writeFile(destPath, await formatCode(fileContents));
};

const writeJsonFile = async (colors) => {
  console.log('-> Writing .json file with colors...');

  const fileContents = JSON.stringify(
    Object.keys(colors).reduce((acc, c) => {
      acc[c] = colors[c].bg;
      return acc;
    }, {})
  );

  const destPath = path.resolve(__dirname + '/../colors.json');

  await writeFile(destPath, await formatCode(fileContents, 'json'));
};

const writeTestFile = async (colors) => {
  const getColorScaleFromName = (name) => {
    const match = /(\d{1,3})$/g.exec(name);
    return match ? parseInt(match[0], 10) : null;
  };

  const htmlLayout = (contents) =>
    `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Lookbook Colors Test Page</title>
    <link rel="stylesheet" href="../dist/lookbook.css">
    <style>
      body {
        padding: 1em;
        background-color: var(--grey-10);
      }

      .block {
        font-weight: bold;
        padding: 1em;
        border-radius: .25em;
        margin-bottom: .5em;
      }
    </style>
  </head>
  <body>
    ${contents}
  </body>
</html>
`;

  const colorBlocks = Object.entries(colors)
    .map(([name, color]) => ({
      color,
      scale: getColorScaleFromName(name),
      name,
    }))
    .map(
      (s) => `
      <p class="block" style="color: ${s.color.fg}; background-color: var(--${s.name})">${s.name}</p>
    `
    )
    .join('');

  const misc = `<h1>A heading</h1>

<p class="mb-2">A paragraph with a <a href="#">link</a>.</p>

<div class="px-2 py-2">
  <button class="btn mr-1">A button</button>
  <button class="btn btn-primary mr-1">A primary button</button>
  <button class="btn btn-secondary mr-1">A secondary button</button>
  <button class="btn btn-danger mr-1">A danger button</button>
  <button class="btn btn-link">A link button</button>
  <button class="btn btn-link btn-link--danger">A link danger button</button>
</div>

<div class="px-2 pb-2">
  <button disabled class="btn mr-1">A button</button>
  <button disabled class="btn btn-primary mr-1">A primary button</button>
  <button disabled class="btn btn-secondary mr-1">A secondary button</button>
  <button disabled class="btn btn-danger mr-1">A danger button</button>
  <button disabled class="btn btn-link">A link button</button>
  <button disabled class="btn btn-link btn-link--danger">A link danger button</button>
</div>

<div style="background-color: var(--blue-90)" class="px-2 py-2">
  <button class="btn dark mr-1">A button</button>
  <button class="btn btn-primary dark mr-1">A primary button</button>
  <button class="btn btn-secondary dark mr-1">A secondary button</button>
  <button class="btn btn-danger dark mr-1">A danger button</button>
  <button class="btn btn-link dark">A link button</button>
  <button class="btn btn-link btn-link--danger dark">A link danger button</button>
</div>

<div style="background-color: var(--blue-90)" class="px-2 pb-2">
  <button disabled class="btn dark mr-1">A button</button>
  <button disabled class="btn btn-primary dark mr-1">A primary button</button>
  <button disabled class="btn btn-secondary dark mr-1">A secondary button</button>
  <button disabled class="btn btn-danger dark mr-1">A danger button</button>
  <button disabled class="btn btn-link dark">A link button</button>
  <button disabled class="btn btn-link btn-link--danger dark">A link danger button</button>
</div>`;

  await writeFile(
    path.resolve(__dirname + '/../test/test.html'),
    htmlLayout(`${misc}

${colorBlocks}`)
  );

  console.log('-> Writing test file with colors...');
};

/**
 * Calls Figma's API and saves to a `colors.js` file in the project root.
 */
const writeColorsFromFigma = async () => {
  const colors = await fetchAllColors();

  if (!colors || Object.keys(colors).length === 0) {
    throw new Error("‚ùå Couldn't fetch colors");
  }

  await writeJsFile(colors);
  await writeJsonFile(colors);
  await writeTestFile(colors);

  console.log(green(`Wrote ${Object.keys(colors).length} colors`));
};

writeColorsFromFigma().catch(console.error);
