#!/usr/bin/env node
const fs = require('fs');
const { promisify } = require('util');
const path = require('path');
const writeFile = promisify(fs.writeFile);
const readFile = promisify(fs.readFile);
const prettier = require('prettier');
const pkg = require('../package.json');

const dest = pkg.types || 'dist/types.d.ts';

const getColorNames = (colors) => Object.keys(colors).map((c) => `'${c}'`);

/**
  Generate Typescript types from a hash of color names and hex codes.

  @param colors A key-value object containing color names as keys and
  hex codes as values
*/
const writeColorTypes = async (colors) => {
  const prettierConf = JSON.parse(
    await readFile(
      path.resolve(path.join(__dirname, '..', '.prettierrc')),
      'utf-8'
    )
  );

  // An array like ['orange-10', 'orange-20', ...]
  const colorNames = getColorNames(colors);

  const typescript = `declare module '@lookback/lookbook' {

  /** The type for a color included in the Lookbook color system. */
  export type Color = ${colorNames.join(' | ')};

  /** A concrete dictionary of colors exported by the Lookbook module.
   * Maps from a Color to a string (hex).
  */
  export const colors: {
    [key in Color]: string;
  };
}
`;

  await writeFile(
    path.resolve(path.join(__dirname, '/../', dest)),
    prettier.format(typescript, { ...prettierConf, parser: 'typescript' })
  );

  console.log(
    `âœ… Wrote ${Object.keys(colors).length} color(s) as Typescript types`
  );
};

writeColorTypes(require('../colors.json')).catch(console.error);
