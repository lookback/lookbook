#!/usr/bin/env node

const AWS = require('aws-sdk');
const crypto = require('crypto');
const path = require('path');
const fs = require('fs');
const { promisify } = require('util');
const { version: pkgVersion } = require('../package.json');
const { colorize, Color, link } = require('../lib/colorize');
const glob = require('fast-glob');
const readline = require('readline');

/*
    DISTRIBUTION SCRIPT FOR LOOKBOOK
    -----------------------------------

    * This script will release a given CSS file to a set S3 bucket.
    * All releases are immutable, i.e. they will refuse to overwrite
      an existing version in the bucket.
    * Versions are decided by the `version` field in `package.json`.
    * The script *will* overwrite the `latest` prefix in the bucket with
      the given CSS file.


    USAGE
    -----------------------------------
    ```
    scripts/distribute <glob> [-f]
    ```

    * See https://github.com/isaacs/node-glob#glob-primer for glob usage.
    * Use -f (or --force) flag to not prompt for confirmation of the files to be uploaded.

    EXAMPLES
    -----------------------------------
    ```
    scripts/distribute dist/lookbook.css
    scripts/distribute dist/*.css
    scripts/distribute dist/*.{css,json}
    ```
    
    CREDENTIALS
    -----------------------------------
    This script needs the following as environment variables:
    
    * `AWS_ACCESS_KEY_ID`
    * `AWS_SECRET_ACCESS_KEY`
*/

const printError = (...args) => console.error(colorize(Color.Red, ...args));

const accessKeyId = process.env.AWS_ACCESS_KEY_ID;
const secretAccessKey = process.env.AWS_SECRET_ACCESS_KEY;
const sessionToken = process.env.AWS_SESSION_TOKEN;
const distroId = process.env.CLOUDFRONT_DISTRO_ID;
const bucket = process.env.AWS_BUCKET || 'lookbook.lookback.io';
const region = 'eu-west-1';

const LATEST_PREFIX_NAME = 'latest';

if (!accessKeyId || !secretAccessKey || !sessionToken) {
  printError(
    '❌ Missing AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY or AWS_SESSION_TOKEN as env variables'
  );
  process.exit(1);
}

if (!distroId) {
  printError('❌ Missing CLOUDFRONT_DISTRO_ID as environment variable');
  process.exit(1);
}

const filePath = process.argv[2];
const flags = process.argv.slice(3);

if (!filePath) {
  printError('❌ Please specify a file glob as first argument');
  process.exit(1);
}

const s3 = new AWS.S3({
  region,
  accessKeyId,
  secretAccessKey,
  sessionToken,
});

const cloudfront = new AWS.CloudFront({});

const readFile = promisify(fs.readFile);
const putObject = promisify(s3.putObject.bind(s3));
const headObject = promisify(s3.headObject.bind(s3));

/**
 * Resolves if user inputs `y`, `yes`, or return key. Rejects
 * otherwise.
 *
 * Usage: `confirm('Is this ok?').then(..).catch(..)`
 */
const confirm = (question) =>
  new Promise((rs, rj) => {
    const handle = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
    });

    handle.question(`${question} (y/n)\n`, (result) => {
      // this is user hitting 'return' key. Seems to be a zero length string, lol:
      if (result.length === 0) {
        rs();
        handle.close();
        return;
      }

      /^(yes)|(y)$/gi.test(result) ? rs() : rj('Aborting...');

      handle.close();
    });
  });

const stylesheetExistsInBucket = (filename, version) =>
  headObject({
    Bucket: bucket,
    Key: `${version}/${filename}`,
  })
    .then(() => true)
    .catch((err) => {
      if (err.code === 'NotFound') {
        return false;
      }

      throw err;
    });

const getContentTypeFromFile = (pathToFile) => {
  switch (path.extname(pathToFile)) {
    case '.css':
      return 'text/css';
    case '.json':
      return 'application/json';
    default:
      return 'text/plain';
  }
};

const uploadToBucket = async ({ contents, key, isImmutable = true }) => {
  const opts = {
    Bucket: bucket,
    Key: key,
    // S3 doesn't "get it" when it comes to file types, so we need to
    // explicitly set it here:
    ContentType: getContentTypeFromFile(key),
    CacheControl: isImmutable
      ? 'public, max-age=31536000, immutable' // Cache for a year
      : 'public',
    ACL: 'public-read',
    Body: contents,
  };

  await putObject(opts);
};

const hashFile = (filename) =>
  new Promise((rs, rj) => {
    const shasum = crypto.createHash('sha1');

    try {
      const stream = fs.createReadStream(filename);
      stream.on('data', (data) => shasum.update(data));
      stream.on('end', () => rs(shasum.digest('hex')));
    } catch (ex) {
      rj(ex);
    }
  });

const invalidate = async (pathToFile, pathPrefix) => {
  const hash = await hashFile(pathToFile);

  console.log(
    colorize(
      Color.Dim,
      `-> Creating CloudFront invalidation for /latest/${path.basename(
        pathToFile
      )}...\n`
    )
  );
  console.log(`The hash is: ${hash}`);

  return new Promise((rs, rj) => {
    cloudfront.createInvalidation(
      {
        DistributionId: distroId,
        InvalidationBatch: {
          Paths: {
            Quantity: 1,
            Items: [`/${pathPrefix}/*`],
          },
          CallerReference: `LookbookInvalidation-${hash}`,
        },
      },
      (err) => {
        console.log(err);
        if (err) return rj(err);

        console.log(colorize(Color.Green, '✅ Done invalidating!'));
        rs();
      }
    );
  });
};

/** Main function. Call with a file glob to put file(s) on S3. */
const releaseFiles = async (fileGlob, force = false) => {
  const globEntries = await glob(fileGlob);

  console.log(
    colorize(
      Color.Dim,
      `-> Releasing to S3:\n\n  ${globEntries.join('\n  ')}\n`
    )
  );

  // Will reject if user doesn't input "yes" or "y"
  if (!force) {
    await confirm('Is this ok?');
  }

  const version = pkgVersion;

  const uploadFile = async (pathToFile) => {
    const contents = await readFile(pathToFile);
    const filename = path.basename(pathToFile);
    // Like: /2.0.0-alpha.1/lookbook.dist.css
    const versionedKey = `${version}/${filename}`;
    // Like: /latest/lookbook.dist.css
    const latestKey = `${LATEST_PREFIX_NAME}/${filename}`;

    if (await stylesheetExistsInBucket(filename, version)) {
      throw new Error(`❌ Version ${version} already exists on S3.
      Please bump the version in package.json and re-run. Nothing has changed on S3 at this point.`);
    }

    // Put new versioned file
    await uploadToBucket({ contents, key: versionedKey });

    // Overwrite latest
    await uploadToBucket({
      contents,
      key: latestKey,
      isImmutable: false,
    });

    return versionedKey;
  };

  const promises = globEntries.map(uploadFile);

  // TODO: Invalidate /latest/lookbook.dist.css
  // Currently fails on access denied for the IAM user.
  // await invalidate(pathToFile, LATEST_PREFIX_NAME);

  return Promise.all(promises).then((keys) => {
    // prettier-ignore
    return `✅ ${colorize(Color.Green, `Released ${version} to`)}
    ${keys.map(key => `
* ${link(`https://s3.${region}.amazonaws.com/${bucket}/${key}`)}
* ${link(`https://s3.${region}.amazonaws.com/${bucket}/${LATEST_PREFIX_NAME}/${path.basename(key)}`)}
`).join('\n')}`;
  });
};

const force = flags.some((flag) => ['--force', '-f'].includes(flag));

// 🚀 Kick it off!
releaseFiles(filePath, force)
  .then((res) => console.log(res))
  .catch((err) => printError(err));
