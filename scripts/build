#!/usr/bin/env bash
set -eo pipefail

source "$(dirname "$0")/config.sh"

# Relative to $LOOKBOOK_SRC
all=lookbook.css
base=base.css
utils=utils.css

ext=css
ext_min_maps=dist.css
ext_min=min.css

help() {
  echo "$(cat << 'EOM'
scripts/build [--full]

Builds the CSS into distributable and importable files with PostCSS.

Example:
  
  # Only builds src/lookbook.css and doesnt minify or add sourcemaps. Meant for quick
  # sanity checks during dev.
  scripts/build

  # Builds the whole pipeline of lookbook.css, base.css, and utils.css. Does produce
  # minified and sourcemapped versions. Also prettify and print sizes of the bundles.
  # Meant for be used when releasing and in CI.
  scripts/build --full
EOM
)"
}

if [ "$1" == "--help" ]; then
  help
  exit 0
fi;

full=$([ "$1" == "--full" ] && echo 1 || echo 0)

build_file () {
  local file_path="$LOOKBOOK_SRC/$1"
  local out=`basename $1 .css`

  # Emit non-minified into dist/<file>.css
  # Meant for being included in other projects, before minification and source mapping
  echo "üïê postcss $LOOKBOOK_DIR/$out.css"
  NODE_ENV=development npx postcss "$file_path" --no-map --dir "$LOOKBOOK_DIR" --verbose

  if [ "$full" == "0" ]; then
    return 0;
  fi;

  # Emit minified and sourcemapped into dist/<file>.dist.css
  echo "üïê postcss $LOOKBOOK_DIR/$out.$ext_min_maps"
  NODE_ENV=production npx postcss "$file_path" --dir "$LOOKBOOK_DIR" --ext "$ext_min_maps" --verbose

  # Emit minified, non-sourcemap dist/<file>.min.css
  echo "üïê postcss $LOOKBOOK_DIR/$out.$ext_min"
  NODE_ENV=production npx postcss "$file_path" --no-map --ext "$ext_min" --dir "$LOOKBOOK_DIR" --verbose
}

separator() {
  echo "----------------------------------"
}

format_file () {
  local file=$1
  echo "üïê Formatting $LOOKBOOK_DIR/$file..."
  npx prettier --write "$LOOKBOOK_DIR/$file"
}

print_sizes () {
  echo "‚öíÔ∏è Sizes"
  separator

  source "$(dirname "$0")/sizes.sh"

  separator
}

run_pipeline () {
  echo "üöÄ Building $1..."
  separator
  build_file $1
  format_file $1
  echo "‚ú® Done with $1"
  separator
}

if [ "$full" == "1" ]; then
  run_pipeline $all
  run_pipeline $base
  run_pipeline $utils
  print_sizes $all $base $utils
else
  build_file $all
fi;
